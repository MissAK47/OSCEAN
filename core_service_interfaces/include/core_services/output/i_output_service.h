#pragma once

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <any>

#include "boost/variant.hpp"
#include "boost/optional.hpp"
#include "boost/thread/future.hpp"

// 包含完整的依赖定义以解决undefined type问题
#include "core_services/data_access/i_data_reader.h"
#include "core_services/common_data_types.h"

namespace oscean {
namespace core_services {
namespace output {

/**
 * @struct WriteOptions
 * @brief Options for writing data to a file.
 */
struct WriteOptions {
    bool overwrite = false;
    std::string format; // e.g., "GTiff", "NetCDF"
    std::map<std::string, std::string> creationOptions; // Format-specific options
};

/// @brief Defines options for chunking large file outputs.
struct ChunkingOptions {
    /// @brief The maximum size of a single file chunk in megabytes.
    double maxFileSizeMB = 100.0;
    /// @brief The strategy for chunking (e.g., "byRow", "bySlice").
    std::string strategy = "byRow";
};

/// @brief Defines styling options for visualization outputs.
struct StyleOptions {
    /// @brief The name of the colormap to use for rendering.
    std::string colorMap;
    /// @brief Specifies whether to draw contour lines.
    bool drawContours = false;
    /// @brief Number of contour levels to generate.
    int contourLevels = 10;
};

/// @brief Represents the final result of an output generation task.
struct OutputResult {
    /// @brief A list of absolute file paths for file-based outputs.
    /// @note Contains a single path for non-chunked outputs.
    boost::optional<std::vector<std::string>> filePaths;

    /// @brief The binary data stream for in-memory outputs.
    /// @note Chunked outputs do not support stream mode.
    boost::optional<std::vector<unsigned char>> dataStream;
};

/// @brief Represents a high-level request driven by an output profile.
struct ProfiledRequest {
    /// @brief The name of the output profile to use (e.g., "generic_geotiff").
    std::string profileName;

    /// @brief The data source for the output operation. Can be a file path or an in-memory data reader.
    boost::variant<std::string, std::shared_ptr<oscean::core_services::IDataReader>> dataSource;

    /// @brief A map of key-value pairs to replace placeholders in the profile template.
    /// @details E.g., {{"jobId", "12345"}, {"timestamp", "2023-10-27"}}
    std::map<std::string, std::string> templateVariables;
};

/// @brief Represents a low-level, fully specified output request.
/// @note This is typically generated by the OutputProfileManager after parsing a profile.
struct OutputRequest {
    /// @brief The data source for the output operation.
    boost::variant<std::string, std::shared_ptr<oscean::core_services::IDataReader>> dataSource;

    /// @brief The target output format (e.g., "csv", "geotiff", "png").
    std::string format;

    /// @brief If true, the output is generated as an in-memory stream instead of a file.
    bool streamOutput = false;

    /// @brief Optional path to the target directory for file-based outputs.
    boost::optional<std::string> targetDirectory;

    /// @brief Filename template for file-based outputs. May contain placeholders like {{chunkIndex}}.
    boost::optional<std::string> filenameTemplate;

    /// @brief Optional chunking configuration for large files.
    boost::optional<ChunkingOptions> chunking;
    
    /// @brief Optional format-specific creation options, passed to the underlying writer (e.g., GDAL).
    boost::optional<std::map<std::string, std::string>> creationOptions;

    /// @brief Optional styling information for visualization.
    boost::optional<StyleOptions> style;
};

/**
 * @class IOutputService
 * @brief Interface for writing data objects to files.
 */
class IOutputService {
public:
    virtual ~IOutputService() = default;

    /**
     * @brief Asynchronously writes GridData to a specified file path.
     * @param gridDataPtr The GridData object to write (as shared_ptr to avoid copying).
     * @param filePath The path of the file to be created.
     * @param options Writing options.
     * @return A future that becomes ready when the write operation is complete.
     */
    virtual boost::future<void> writeGridAsync(
        std::shared_ptr<const GridData> gridDataPtr,
        const std::string& filePath,
        const WriteOptions& options) = 0;

    /// @brief Processes an output task based on a named profile. This is the preferred high-level method.
    /// @param request A ProfiledRequest object containing the profile name, data source, and template variables.
    /// @return A boost::future containing the OutputResult.
    virtual boost::future<OutputResult> processFromProfile(const ProfiledRequest& request) = 0;

    /// @brief Processes a fully specified, low-level output request.
    /// @param request An OutputRequest object with all details specified.
    /// @return A boost::future containing the OutputResult.
    virtual boost::future<OutputResult> processRequest(const OutputRequest& request) = 0;

    // TODO: Add methods for other data types like FeatureCollection if needed.
};

} // namespace output
} // namespace core_services
} // namespace oscean 